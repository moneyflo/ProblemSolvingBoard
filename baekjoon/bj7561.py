# -*- coding: utf-8 -*-
"""bj7561.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yGLwiK3BeGuWiF7pZs7k1DEqOi22bMg9
"""

# no.7561 크래머의 공식
import copy

N = int(input())

def determinant(m, b_, n=0, ch=True):
    de = 0
    if ch:
        for i in range(3):
            m[i][n] = b_[i]
    de = m[0][0]*(m[1][1]*m[2][2] - m[1][2]*m[2][1])\
        - m[0][1]*(m[1][0]*m[2][2] - m[1][2]*m[2][0])\
        + m[0][2]*(m[1][0]*m[2][1] - m[1][1]*m[2][0])

    return de

for _ in range(N):
    a = []
    b = []
    det = []
    sol = []

    for _ in range(3):
        tmp1 = list(map(int, input().split()))
        a.append(tmp1[:3])
        b.append(tmp1[3])

    for i in range(3):
        tmp2 = copy.deepcopy(a)
        tmp3 = determinant(tmp2, b, i)
        det.append(tmp3)
    det.append(determinant(a, b, ch=False))

    print(det[0], det[1], det[2], det[3])

    if det[3] == 0:
        print("No unique solution")
        print("")
        continue

    for i in range(3):
        s = det[i] / det[3]
        if -0.0005 < s < 0.0005:
            s = 0
        sol.append(s)

    print(f"Unique solution: {sol[0]:.3f} {sol[1]:.3f} {sol[2]:.3f}")
    print("")